#!/bin/bash
source "$HOME/.local/share/dotfiles/bin/lib/helpers.sh"
set -e

log_header "PostgreSQL Restore"

# Look for backup files in home directory
backup_dir="$HOME"

# Check for fzf
if ! command -v fzf &>/dev/null; then
  log_error "fzf is not installed"
  exit 1
fi

log_step "Finding backup files..."
backup_files=$(find "$backup_dir" -maxdepth 3 -not -path '*/.*' -name "*.backup" -type f -printf "%P\n" | sort -r)

if [ -z "$backup_files" ]; then
  log_info "No .backup files found in $backup_dir"
  log_info "Please create a PostgreSQL backup first using postgres-backup-db"
  read -p "Press Enter to exit..."
  exit 0
fi

selected_backup=$(echo "$backup_files" | fzf --prompt="Select backup to restore: " --height=40% --border)

if [ -z "$selected_backup" ]; then
  log_info "No backup selected. Exiting."
  exit 0
fi

backup_file="$backup_dir/$selected_backup"

db_name=$(basename "$selected_backup" | sed 's/_[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-9]\{4\}\.backup$//')

log_step "Restore Details"
log_detail "Backup file: $selected_backup"
log_detail "Database name: $db_name"
echo

# Check if database already exists
if psql -d postgres -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
  log_error "Database '$db_name' already exists!"
  echo ""
  echo "Options:"
  echo "  1) Drop and recreate (DESTRUCTIVE - all data will be lost)"
  echo "  2) Restore to a different database name"
  echo "  3) Cancel"
  echo ""
  read -p "Enter choice (1/2/3): " choice

  case $choice in
  1)
    echo ""
    read -p "Are you absolutely sure? Type '$db_name' to confirm: " confirm
    if [ "$confirm" != "$db_name" ]; then
      log_info "Confirmation failed. Exiting."
      exit 0
    fi
    log_step "Dropping database '$db_name'..."
    dropdb "$db_name"
    ;;
  2)
    echo ""
    read -p "Enter new database name: " db_name
    if [ -z "$db_name" ]; then
      log_info "No database name provided. Exiting."
      exit 0
    fi
    ;;
  3)
    log_info "Cancelled."
    exit 0
    ;;
  *)
    log_error "Invalid choice. Exiting."
    exit 1
    ;;
  esac
fi

# Create database
log_step "Creating database '$db_name'..."
createdb "$db_name"

# Restore backup
log_step "Restoring backup..."
pg_restore -d "$db_name" -v "$backup_file"

log_success "Database restored: $db_name"
show_done
